
  - name: Ensure old service has stopped
    ansible.builtin.command: "systemctl stop mythicteamserver"
    ignore_errors: true
    become: true

  - name: Ensure any old mythicteamserver service is disabled
    ansible.builtin.command: "systemctl disable mythicteamserver"
    become: true
    ignore_errors: true

  - name: Reload system manager
    ansible.builtin.shell: "systemctl daemon-reload && systemctl reset-failed"
    become: true

  - name: Ensure old system files are gone
    ansible.builtin.file:
      path: "/etc/systemd/system/mythicteamserver.service"
      state: absent
    become: true

  - name: Install for Docker installation
    ansible.builtin.apt:
      name: 
        - gpg
        - ca-certificates
        - git
        - make
      state: present
      update_cache: yes
      install_recommends: yes

  - name: set APT Key for Docker
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      keyring: /usr/share/keyrings/docker-archive-keyring.gpg
      state: present
    when: ansible_distribution == "Ubuntu"

  - name: Add Docker repository into sources list for Ubuntu
    ansible.builtin.apt_repository:
      repo: "deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      state: present
      update_cache: True
    when: ansible_distribution == "Ubuntu"

  - name: set APT Key for Docker
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/debian/gpg
      keyring: /usr/share/keyrings/docker-archive-keyring.gpg
      state: present
    when: ansible_distribution == "Debian"

  - name: Add Docker repository into sources list for Debian
    ansible.builtin.apt_repository:
      repo: "deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
      state: present
      update_cache: True
    when: ansible_distribution == "Debian"

  - name: Download Packages
    ansible.builtin.package:
      name:
        - curl
        - docker-ce
        - docker-compose
        - docker-compose-plugin
      state: present

  - name: Remove existing Mythic installation
    ansible.builtin.file:
      path: "/opt/mythic"
      state: absent

  - name: Clone Mythic repo
    ansible.builtin.git:
      repo: 'https://github.com/its-a-feature/Mythic'
      dest: /opt/mythic

  - name: Build Mythic
    community.general.make:
      chdir: /opt/mythic

  - name: Start Mythic
    ansible.builtin.command: "./mythic-cli start"
    args:
      chdir: "/opt/mythic"
    become: yes

# Install Listeners
  - name: Install HTTP
    ansible.builtin.command: "/opt/mythic/mythic-cli install github https://github.com/MythicC2Profiles/http -f"
    become: yes
    args:
      chdir: "/opt/mythic"
  
  - name: Install SMB
    ansible.builtin.command: "/opt/mythic/mythic-cli install https://github.com/MythicC2Profiles/smb -f"
    become: yes
    args:
      chdir: "/opt/mythic"

  - name: Install HTTPX
    ansible.builtin.command: "/opt/mythic/mythic-cli install https://github.com/MythicC2Profiles/httpx -f"
    become: yes
    args:
      chdir: "/opt/mythic"
    
  - name: Install TCP
    ansible.builtin.command: "/opt/mythic/mythic-cli install https://github.com/MythicC2Profiles/tcp -f"
    become: yes
    args:
      chdir: "/opt/mythic"

# Install Agents
  - name: Install Poseidon
    ansible.builtin.command: "/opt/mythic/mythic-cli install github https://github.com/MythicAgents/poseidon -f"
    become: yes
    args:
      chdir: "/opt/mythic"
  
  - name: Install Apollo
    ansible.builtin.command: "/opt/mythic/mythic-cli install github https://github.com/MythicAgents/apollo -f"
    become: yes
    args:
      chdir: "/opt/mythic"

# Install Services
  - name: Install Forge
    ansible.builtin.command: "/opt/mythic/mythic-cli install github https://github.com/MythicAgents/forge.git -f"
    become: yes
    args:
      chdir: "/opt/mythic"

  
# Start Listeners
  - name: Start HTTP
    ansible.builtin.command: "/opt/mythic/mythic-cli start http"
    become: yes
    args:
      chdir: "/opt/mythic"

  - name: Start SMB
    ansible.builtin.command: "/opt/mythic/mythic-cli start smb"
    become: yes
    args:
      chdir: "/opt/mythic"
    
  - name: Start HTTPX
    ansible.builtin.command: "/opt/mythic/mythic-cli start httpx"
    become: yes
    args:
      chdir: "/opt/mythic"
  
  - name: Start TCP
    ansible.builtin.command: "/opt/mythic/mythic-cli start tcp"
    become: yes
    args:
      chdir: "/opt/mythic"


# Start Agents
  - name: Start Poseidon
    ansible.builtin.command: "/opt/mythic/mythic-cli start poseidon"
    become: yes
    args:
      chdir: "/opt/mythic"

  - name: Start Apollo
    ansible.builtin.command: "/opt/mythic/mythic-cli start apollo"
    become: yes
    args:
      chdir: "/opt/mythic"

# Start Services
  - name: Start Forge
    ansible.builtin.command: "/opt/mythic/mythic-cli start forge"
    become: yes
    args:
      chdir: "/opt/mythic"


  - name: Make Mythic available on VPN
    ansible.builtin.command: "./mythic-cli config set mythic_server_bind_localhost_only false"
    become: yes
    args:
      chdir: "/opt/mythic"

  - name: Restart Mythic
    ansible.builtin.command: "./mythic-cli restart"
    become: yes
    args:
      chdir: "/opt/mythic"

  - name: Add System file for Teamserver
    ansible.builtin.template:
      src: "mythicteamserver.template"
      dest: "/etc/systemd/system/mythicteamserver.service"

  - name: Check service file was created
    ansible.builtin.stat:
      path: "/etc/systemd/system/mythicteamserver.service"

  - name: Reload Systemd manager
    ansible.builtin.command: "systemctl daemon-reload"
    become: yes

  - name: Start Teamserver service
    ansible.builtin.command: "systemctl start mythicteamserver.service"
    become: yes

  - name: Enable Teamserver service
    ansible.builtin.command: "systemctl enable mythicteamserver.service"
    become: yes

  - name: Get Mythic Admin Password
    ansible.builtin.command: "./mythic-cli config get MYTHIC_ADMIN_PASSWORD"
    args:
      chdir: "/opt/mythic"
    become: yes
    register: mythic_admin_pass

  - name: Output Mythic Password to User
    ansible.builtin.debug:
      msg: "{{ mythic_admin_pass.stdout }}"
